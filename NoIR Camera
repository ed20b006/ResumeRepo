#!/usr/bin/env python3

import threading
import random
from picamera import PiCamera, Color
import datetime
from time import sleep
import cv2

class VideoRecorder:
    def __init__(self, res_x=640, res_y=480, framerate=25, rotation=0, timestamp=True, timestamp_bgcolor="blue", timestamp_fontcolor="yellow", timestamp_fontsize=20, timestamp_format="%d/%m/%Y, %H:%M:%S"):
        self.file_name = 'default_name' # This should be replaces with a value given in self.start()
        self.camera = PiCamera()
        self.camera.resolution = (res_x, res_y)
        self.camera.framerate = framerate
        self.camera.rotation = rotation #180
        self.timestamp = timestamp
        self.timestamp_bgcolor = timestamp_bgcolor
        self.timestamp_fontcolor = timestamp_fontcolor
        self.timestamp_fontsize = timestamp_fontsize
        self.timestamp_format = timestamp_format

    def record(self):
        self.camera.start_recording(self.file_name)

        annotate_thread = threading.Thread(target=self.update_annotation)
        annotate_thread.start()

    def stop(self):
        self.camera.stop_recording()

    def update_annotation(self):
        while self.camera.recording:
            if self.timestamp == True:
                self.camera.annotate_background = Color(self.timestamp_bgcolor)
                self.camera.annotate_foreground = Color(self.timestamp_fontcolor)
                self.camera.annotate_text = datetime.datetime.now().strftime(self.timestamp_format)
                self.camera.annotate_text_size = self.timestamp_fontsize
                sleep(1)            

    def start(self, file_name, file_dir):
        self.file_name = '{}/{}.h264'.format(file_dir, file_name)

        video_thread = threading.Thread(target=self.record)
        video_thread.start()

    def showVideo(self):
        # Create a VideoCapture object and read from input file
        # If the input is the camera, pass 0 instead of the video file name
        cap = cv2.VideoCapture(self.file_name)
        
        # Check if camera opened successfully
        if (cap.isOpened()== False): 
            print("Error opening video stream or file")
        
        # Read until video is completed
        while(cap.isOpened()):
            # Capture frame-by-frame
            ret, frame = cap.read()
            if ret == True:
            
                # Display the resulting frame
                cv2.imshow('Frame',frame)
            
                # Press Q on keyboard to  exit
                if cv2.waitKey(25) & 0xFF == ord('q'):
                    break
        
            # Break the loop
            else: 
                break
        
        # When everything done, release the video capture object
        cap.release()
        
        # Closes all the frames
        cv2.destroyAllWindows()

class PhotoCapture:
    def __init__(self, res_x=640, res_y=480, rotation=0, timestamp=True, timestamp_bgcolor="blue", timestamp_fontcolor="yellow", timestamp_fontsize=20, timestamp_format="%d/%m/%Y, %H:%M:%S"):
        self.file_name = 'default_name' # This should be replaces with a value given in self.start()
        self.camera = PiCamera()
        self.camera.resolution = (res_x, res_y)
        self.camera.rotation = rotation #180
        self.timestamp = timestamp
        self.timestamp_bgcolor = timestamp_bgcolor
        self.timestamp_fontcolor = timestamp_fontcolor
        self.timestamp_fontsize = timestamp_fontsize
        self.timestamp_format = timestamp_format

    def capture(self, file_dir, file_name):
        self.file_name = '{}/{}.jpg'.format(file_dir, file_name)
        self.camera.capture(self.file_name)

    def showPic(self):
        cv2.imshow("Image", self.file_name)

def mainloop():
    running = True
    while running:
        inp = int(input("1.Image\n2.Video\n3.Exit\n"))
        if inp == 1:
            cam = PhotoCapture(timestamp=True)
            sleep(2)
            cam.capture(".","Image")
            cam.showPic()
            pass
        elif inp == 2:
            cam = VideoRecorder(framerate=32, timestamp=True)
            sleep(2)
            cam.record(".","Video")
            input("Press Enter to exit")
            cam.stop()
            cam.showVideo()
        elif inp == 3:
            running = False
        else:
            print("Invalid option")

if __name__ == '__main__':
    mainloop()
